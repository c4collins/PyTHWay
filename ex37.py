print "\n\tKeywords"

print "\n* and"
print "Evaluates a statement based on the boolean and. | True and True | is True, all else is False."
print "\n* del()"
print "Deletes an object from memory. | del(x) | will make the object x unreferenceable."
print "\n* from"
print "Used in an expanded import sequence. | from XXX import YYY. |"
print "\n* not()"
print "Evaluates a statement with the boolean not, inverting the outcome.  For example, | not(True and True) | is False, while all other and statements will return True."
print "\n* while"
print "Used in iteration. | while x <= y: | will continue to iterate until the condition is met."
print "\n* as"
print "Used in an expanded import sequence. | import sys as foo |  OR  | from sys import file as bar |"
print "\n* elif"
print "Additional conditional for an if statement. | if x = y: ...  elif x = z: ... else: ... |"
print "\n* global"
print "Calls global variables into the local scope.  If there was a global variable named big_variable, and you wanted to use it in a function, | big_variable = 42 | would create a local big_variable, unless it's preceeded with | global big_variable | to indicate that you want to use the variable already named int he global scope."
print "\n* or"
print "Evaluates a statement with the boolean or.  | False or False | is False, all else are True."
print "\n* assert"
print "Allows you to perform quick passive checks of data and return errors.  | assert (argument), \"error statement\" |  For example | assert x != False, 'x is False' | will throw an AssertionError if x = False, and will continue with the code if it's anything else."
print "\n* else"
print "Used in if statements to provice a fallback script. | if x = y: ...  elif x = z: ... else: ... |"
print "\n* if"
print "Begins an if statement. | if x = y: ...  elif x = z: ... else: ... |"
print "\n* pass"
print "The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action. Probably has a good use, but for now is good for filler in functions or if statements that require something but you haven't written it and want to keep the program going."
print "\n* yield"
print "Similar to the return keyword, it returns a value from an iterative process.  However, yield is used with generators, which do not create lists but simply generate a stream of values.  This is useful because it doesn't create lists in memory, thereby allowing it to run on large amounts of data."
print "\n* break"
print "Breaks a loop, usually used to escape from while or until iterations"
print "\n* import"
print "Used to import modules into a python script.  | import foo |  OR  | from foo import * |  OR  | from foo import bar as foo_bar |"
print "\n* print"
print "Prints a string to the interface. | print \"\n* print\" |"
print "\n* in"
print "Used in iterative statements to indicate the object for iteration.  | for x in 0..39: |  OR  | for x in list: |"
print "\n* raise"
print "Manually raises an exception."
print "\n* return"
print "Signifies a value for a function to return."
print "\n* def"
print "Preceeds a class or function name to indicate the definition of a new function or class.  | def function(arg1, arg2, ...): |"
print "\n* for"
print "begins an interative statement. | for x in list: |"


print "\n\tData Types"
print "\n* True"
print "True is True."
print "\n* False"
print "False is False."
print "\n* None"
print "None is Does Not Exist."
print "\n* strings"
print "strings go in quotes and are immutable. string = \"String\""
print "\n* numbers"
print "numbers are integers.  integer = 1"
print "\n* floats"
print "floats have decimal values. float = 2.0"
print "\n* lists"
print "lists contain multiple objects of any types.  list = [obj1, obj2, ...]"

print "\n\tString Escapes Sequences"
print "\n* \\\\"
print "Prints \\ instead of escaping the next character."
print "\n* \\\'"
print 'prints \' instead of screwing up the outer quotes.'
print "\n* \\\""
print "prints \" instead of screwing up the outer quotes."
print "\n* \\a"
print "\a prints."
print "\n* \\b"
print "\b prints"
print "\n* \\f"
print "\f prints"
print "\n* \\n"
print "Prints a new line."
print "\n* \\r"
print "Prints a carriage return character"
print "\n* \\t"
print "Prints a tab character"
print "\n* \\v"
print "\v prints"

print "\n\tString Formats"
print "\n* %d"
print "signed integer decimal"
print "\n* %i"
print "signed integer decimal"
print "\n* %o"
print "unsigned octal"
print "\n* %u"
print "signed integer decimal"
print "\n* %x"
print "unsigned hexadecimal (lowercase)"
print "\n* %X"
print "unsigned hexadecimal (uppercase)"
print "\n* %e"
print "floating point exponnential format (lowercase)"
print "\n* %E"
print "floating point exponnential format (uppercase)"
print "\n* %f"
print "floating point decimal"
print "\n* %F"
print "floating point decimal"
print "\n* %g"
print "floating point decimal/exponential"
print "\n* %G"
print "floating point decimal/exponential"
print "\n* %c"
print "single character"
print "\n* %r"
print "string.  converted using repr()"
print "\n* %s"
print "string. converted using str()"
print "\n* %%"
print "used to represent the % character"

print "\n\tOperators"
print "\n* +"
print "addition"
print "\n* -"
print "subtraction"
print "\n* *"
print "multiplication"
print "\n* **"
print "exponentiation"
print "\n* /"
print "division"
print "\n* //"
print "truncating division"
print "\n* %"
print "modulo - returns the division's remainder"
print "\n* <"
print "less than"
print "\n* >"
print "greater than"
print "\n* <="
print "less than or equal to"
print "\n* >="
print "greater than or equal to"

print "\n\tString Formats"
print "\n* =="
print "equal to"
print "\n* !="
print "not equal to"
print "\n* <>"
print "greater or less than"
print "\n* +="
print "add and assign a value"
print "\n* -="
print "subtract and assign a value"
print "\n* *="
print "multiply and assign a value"
print "\n* /="
print "divide and assign a value"
print "\n* //="
print "truncate divide and assign a value"
print "\n* %="
print"modulo and assign a value"
print "\n* **="
print "powers and assigns"

print "\n\tUnknown Symbols"
print "Keywords:",
print "with,",
print "except,",
print "class,",
print "exec,",
print "continue,",
print "finally,",
print "is,",
print "lambda,",
print "try"

print "String Formats:",
print "( ),",
print "[ ],",
print "{ },",
print "@,",
print ",,",
print ":,",
print ".,",
print "=,",
print ";"